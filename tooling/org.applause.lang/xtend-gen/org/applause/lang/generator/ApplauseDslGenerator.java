/**
 * generated by Xtext
 */
package org.applause.lang.generator;

import com.google.inject.Inject;
import com.google.inject.Provider;
import java.util.List;
import org.applause.lang.generator.BuildParticipantRegistry;
import org.applause.lang.generator.IBuildParticipant;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class ApplauseDslGenerator implements IGenerator {
  @Inject
  private Provider<BuildParticipantRegistry> participantRegistry;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    BuildParticipantRegistry _get = this.participantRegistry.get();
    List<IBuildParticipant> _buildParticipants = _get.getBuildParticipants();
    for (final IBuildParticipant participant : _buildParticipants) {
      participant.doGenerate(resource, fsa);
    }
    CharSequence _compileParticipants = this.compileParticipants();
    fsa.generateFile("buildparticipants.txt", _compileParticipants);
  }
  
  public CharSequence compileParticipants() {
    StringConcatenation _builder = new StringConcatenation();
    {
      BuildParticipantRegistry _get = this.participantRegistry.get();
      List<IBuildParticipant> _buildParticipants = _get.getBuildParticipants();
      for(final IBuildParticipant participant : _buildParticipants) {
        _builder.append("Participant: ");
        Class<? extends IBuildParticipant> _class = participant.getClass();
        String _name = _class.getName();
        _builder.append(_name, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
}
