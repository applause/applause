grammar org.applause.lang.ApplauseDsl with org.eclipse.xtext.common.Terminals

generate applauseDsl "http://www.applause.org/lang/ApplauseDsl"

Model:
	elements += NamedElement*
;

NamedElement:
	Type | Platform | DataSource | Screen | UIComponentDeclaration | ListItemCellDeclaration
;

// -----------------------------------------
// Entities
// -----------------------------------------

Type:
	DataType | Entity
;

// HACK as suggested by Jan KÃ¶hnlein in per http://www.eclipse.org/forums/index.php/mv/msg/200409/639873/#msg_639873
KeywordedID:
	ID |
	'title' | 'platform' | 'resource' | 'section' | 'abstract' |
	'delete' | 'add' | 'edit' | 'display' // can be removed later when  we remove ActionVerb
;

DataType:
	'datatype' name=KeywordedID	
;

Entity:
	(abstract ?= 'abstract')? 'entity' name=ID ('extends' superType=[Entity])? '{'
		attributes += Attribute*
	'}'
;

Attribute:
	type=[Type]	(many?='[]')? name=KeywordedID
;

// -----------------------------------------
// Platform-specific mappings
// -----------------------------------------

Platform:
	'platform' name=ID '{'
		mappings += PlatformMapping*
	'}'
;

PlatformMapping:
	TypeMapping // | NamespaceMapping
;

TypeMapping:
	'typemapping' type=[DataType] '->' simpleName=ID
;

// -----------------------------------------
// Data Source
// -----------------------------------------

DataSource:
	'datasource' name=ID '{'
		'baseUrl' ':' baseUrl=AbsoluteRESTURL
		'resource' ':' resourceType=[Entity]
		methods += DataSourceAccessMethod*
	'}'
;

// TODO: As we can have multiple datasource for each entity, we should either:
// (a) make sure only one datasource cen be defined per dentity
// (b) there always is just one data source access method with the same name for any given entity
// IMO, (a) seems to be easier  
DataSourceAccessMethod:
	name=KeywordedID '(' (declaredParameters += Parameter (',' declaredParameters += Parameter)* )? ')' (returnsMany?='[]')? restSpecification=RESTSpecification 
;

RESTSpecification:
	verb=RESTVerb 
	path=RESTURL 
	('{' body=DataSourceBodySpecification '}')?	
;

DataSourceBodySpecification:
	bodycontents=[Parameter]	
;

enum RESTVerb:
	GET | POST | PUT | DELETE
;

Parameter:
	type=[Type] name=KeywordedID	
;

RESTURL:
	AbsoluteRESTURL | RelativeRESTURL
;

AbsoluteRESTURL:
	{AbsoluteRESTURL} 'http://' host=UrlFragment (':' port=INT)? ('/' fragments+=UrlFragment)* ('?' parameters+=UrlParameter ('&'parameters+=UrlParameter)* )?
;

UrlParameter:
	name=KeywordedID '=' value=Variable
;


RelativeRESTURL:
	{RelativeRESTURL} '/' fragments+=UrlFragment ('/' fragments+=UrlFragment)* ('?' parameters+=UrlParameter ('&'parameters+=UrlParameter)* )?
;


UrlFragment:
	UrlPathFragment | Variable
;

UrlPathFragment:
	name=QualifiedName
;

Variable:
	':' parameterReference=ParameterMemberCall
;

QualifiedName:
	ID ('.' ID)*
;

// -----------------------------------------
// Screens
// -----------------------------------------

Screen:
	'screen' kind=ScreenKind name=ID ('(' inputParameter=Parameter ')')? '{'
		('title' '=' title=STRING)?
		('datasource' '=' datasource=DataSourceCall)?
		'sections' '{'
			sections+=ScreenSection*
		'}'
		('actions' '{'
			actions+=UIAction*
		'}')?
		('controller' '{'
			verbs+=ControllerVerb*
		'}')?
	'}'
;

// TODO: this should later use a reflective approach just like we use for cells
enum ScreenKind:
	DefaultList | DefaultDetails
;

ScreenSection:
	'section' '{'
		('title' '=' title=STRING)?
		('datasource' '=' datasource=DataSourceCall)?
		items=ScreenSectionItems
	'}'	
;

ScreenSectionItems: {ScreenSectionItems}
	'items' '{'
		items+=ScreenListItemCell*
	'}'
;

ScreenListItemCell:
	'cell' type=[ListItemCellDeclaration] ('foreach' restMethod=RESTMethodCall 'as' variable=LoopVariable)? '{'
		configurations+=UIComponentMemberConfiguration*
		('actions' '{'
			actions+=UIAction*
		'}')?
	'}'
;

ReferrableElement:
	Parameter | LoopVariable
;

LoopVariable:
	name=ID
;

UIAction:
	'action' '{'
		('title' '=' title=STRING)?
		('icon' '=' icon=STRING)?
		'action' '=' action=UIActionSpecification
		('gesture' '=' gesture = GestureKind)?
		('order' '=' order=INT)?
	'}'
;

enum GestureKind:
	tap | swipe | longpress
;

UIActionSpecification:
	UIActionNavigateAction | UIActionDeleteAction 
;

UIActionNavigateAction: {UIActionNavigateAction}
	targetScreen=[Screen] '.' actionVerb=[ControllerVerb|KeywordedID] '(' (variable=[ReferrableElement])? ')'
;

UIActionDeleteAction: {UIActionDeleteAction}
	'delete'
;

ControllerVerb:
	kind=ControllerVerbKind name=KeywordedID '(' (declaredParameters += Parameter (',' declaredParameters += Parameter)* )? ')' '{'
		(restMethod=RESTMethodCall)?
	'}'
;

enum ControllerVerbKind:
	add | edit | display | delete
;

ListItemCellDeclaration:
	'listitemcell' name=ID '{'
		members+=UIComponentMemberDeclaration*
	'}'
;

UIComponentDeclaration:
	'uicomponent' name=ID '{'
		members+=UIComponentMemberDeclaration*	
	'}'
;

UIComponentMemberDeclaration:
	type=[UIComponentOrDataType] name=ID
;

UIComponentOrDataType:
	UIComponentDeclaration | DataType
;

RESTMethodCall:
	datasource=[DataSourceCall] '.' restMethod=[DataSourceAccessMethod|KeywordedID] '(' (parameters+=ParameterCall)? (',' parameters+=ParameterCall)*')'
;

DataSourceCall:
	datasource=[DataSource] 'as' name=KeywordedID
;

UIComponentMemberConfiguration:
	type=UIComponentMemberCall '=' value=Expression
;

UIComponentMemberCall:
	component=[UIComponentMemberDeclaration]('.' member=[UIComponentMemberDeclaration])?
;


// -----------------------------------------
// Expressions
// TODO: implement a proper type system
// -----------------------------------------

Expression:
	StringLiteral | EntityMemberCall
;

// as outlined here http://christiandietrich.wordpress.com/2013/05/18/xtext-and-dot-expressions/
ParameterCall returns ParameterReference:
	{ParameterCall} head=[Parameter]
;

ParameterMemberCall returns ParameterReference:
	ParameterCall ({ParameterMemberCall.reference=current} '.' tail=[Attribute])*	
;

EntityMemberCall:
	head=[Attribute] (tail=EntityMemberCallTail)?
;

EntityMemberCallTail:
	'.' head=[Attribute] (tail=EntityMemberCallTail)?
;

AttributeReference:
	value=[Attribute]
;

StringLiteral:
	value=STRING
;
